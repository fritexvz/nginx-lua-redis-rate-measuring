events {
  worker_connections 1024;
}

error_log stderr;

http {
  lua_package_path "/usr/local/openresty/luajit/share/lua/5.1/?.lua;";
  lua_package_cpath "/usr/local/openresty/luajit/lib/lua/5.1/?.so;";

  lua_shared_dict redis_cluster_slot_locks 100k;

  init_by_lua_block {
    config = {
      name = "redis-cluster",
      serv_list = {
        { ip = "10.5.0.3", port = 7000 },
        { ip = "10.5.0.3", port = 7001 },
        { ip = "10.5.0.3", port = 7002 },
        { ip = "10.5.0.3", port = 7003 },
        { ip = "10.5.0.3", port = 7004 },
        { ip = "10.5.0.3", port = 7005 },
      },
      keepalive_timeout = 60000,
      keepalive_cons = 1000,
      connection_timout = 1000,
      max_redirection = 5,
    }

    redis_cluster = require "resty-redis-cluster"
  }

  server {
    listen 8080;

    location /lua_content {
      default_type 'text/plain';

      content_by_lua_block {
        local function rate_for(redis_client, key)
          local current_time = math.floor(ngx.now())
          local current_minute = math.floor(current_time / 60) % 60
          local past_minute = current_minute - 1
          local current_key = key .. current_minute
          local past_key = key .. past_minute

          local resp, err = redis_client:get(past_key)
          if err then
            return nil, err
          end

          if resp == ngx.null then
            resp = "0"
          end

          local last_counter = tonumber(resp)

          resp, err = redis_client:incr(current_key)
          if err then
            return nil, err
          end

          local current_counter = tonumber(resp) - 1

          resp, err = redis_client:expire(current_key, 2 * 60)
          if err then
            return nil, err
          end

          -- strongly inspired by https://blog.cloudflare.com/counting-things-a-lot-of-different-things/
          local current_rate = last_counter * ((60 - (current_time % 60)) / 60) + current_counter
          return current_rate, nil
        end

        local redis_client = redis_cluster:new(config)
        local rate, err = rate_for(redis_client, ngx.var.arg_token)
        if err then
            ngx.log(ngx.ERR, "err: ", err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end

        if rate > 10 then
            ngx.exit(ngx.HTTP_FORBIDDEN)
        end

        ngx.say(rate)
      }
    }
  }
}
